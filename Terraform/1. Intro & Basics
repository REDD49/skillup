




Terraform workFlow & Basic commands

Terraform workflow
 init --> validate --> plan --> apply --> destroy

Basic Commands
 terraform init --> terraform validate --> terraform plan --> terraform apply --> terraform destroy
 
choose a location to provision your infra
az account list-locations -o table

# Azure CLI Login
az login

# List Subscriptions
az account list

# Set Specific Subscription (if we have multiple subscriptions)
az account set --subscription="SUBSCRIPTION_ID"

Register Terraform azure provider
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs

https://registry.terraform.io/providers/hashicorp/azurerm/latest

Terrafrom azure resources provider docs
Ex:
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/resource_group

1. Terraform init

it will create a .terraform directory & .terraform.lock.hcl files

in .terraform directory structure --> .terraform --> providers --> registry.teraform.io --> hashicorp --> azurerm --> Ex: (3.59.0) --> windows_amd64 --> terraform provider.exe file

2. Terraform validate
 it will validate all the syntaxs in the .tf files
 
3. Terraform plan

cmd: terraform plan -out resource_group.tfplan

resource_group.tfplan file will be generated, with the proper actions to performed in the file & will save the plan file

4. terraform apply

it will create the resources mentioned in .tf file

terraform.tf state file has all the metadata information of all the provisioned resources of the files
after terraform apply was successful. - terraform.tfstate file will be created (it will have info. of created resources in that file)

5. terraform destroy

after terrafrom destroy - .tf state metadata file the resource data will be deleted
terraform.tfstate.backup will be created, before destroying the resources. then will destrpy the resources

-----------------

Language Basics

all the files name will be **.tf extensions. 
json based files will **.tf.json extensions.

we call the terraform files .tf config files (or) terraform configuration files (or) terraform manifests.

configuration syntaxs in Terraform
   HCL - Hashicorp Language --> Terraform --> 1,2,3,4
   
   1. Blocks
   2. Arguments
   3. Identifiers
   4. Comments
 
 Arguments - Ex: name, locations.
 
 atributes - Ex: id's (once the resource is created, id will be generated. that can be exported)
 
 comments -- # this is comment  - single line comment
             // this is comment - single line comment
             /*
             multi line comments
             line 1
             line 2
             */
             
 Terrafrom Top-Level Blocks (3)
 
 1. Fundamental Blocks - terraform block, providers block, resources block
 
 2. Variable Blocks - input variable block, output values block, local values block
 
 3. Calling / Referencing Blocks - Data sources block, modules block
 
 
 
 
